/* The algorithm uses three objects: costs, parents, processed. The costs object contains the distances from each vertex to the starting vertex start. The parents object contains information about the parents of each vertex, i.e. the vertex from which you can get to the given vertex the fastest. The processed object contains a list of already processed vertices.
First, distances are set for all vertices (except the initial vertex) in Infinity, and the distance for the initial vertex is set to 0. Next, the smallest distance to the neighboring vertices is calculated using the edge weight. If this distance is less than the current distance, the distance for the vertex is updated, and the parent vertex is also updated.
After that, the vertex is added to the list of processed vertices, and the algorithm continues until all vertices are processed.
After completing the algorithm, the shortest path from the final vertex to the initial vertex is found using the information from the parent object. The path is stored in the optimalPath array, which is rotated to get the path from start to finish. The result is returned as an object. */

const graph = {};
graph.a = { b: 2, c: 1 };
graph.b = { f: 5 };
graph.c = { d: 5, e: 2 };
graph.d = { f: 1 };
graph.e = { f: 1 };
graph.f = { g: 1 };
graph.g = {};

function shortestPath(graph, start, end) {
    const costs = {};
    const parents = {};
    const processed = [];

    for (let node in graph) {
        if (node === start) {
            costs[node] = 0;
        } else {
            costs[node] = Infinity;
        }
        parents[node] = null;
    }

    let node = findLowestCostNode(costs, processed);
    while (node) {
        const cost = costs[node];
        const neighbors = graph[node];
        for (let n in neighbors) {
            const newCost = cost + neighbors[n];
            if (costs[n] > newCost) {
                costs[n] = newCost;
                parents[n] = node;
            }
        }
        processed.push(node);
        node = findLowestCostNode(costs, processed);
    }

    let optimalPath = [end];
    let parent = parents[end];
    while (parent) {
        optimalPath.push(parent);
        parent = parents[parent];
    }
    optimalPath.reverse();

    const results = {
        distance: costs[end],
        path: optimalPath,
    };
    return results;
}

function findLowestCostNode(costs, processed) {
    let lowestCost = Infinity;
    let lowestCostNode = null;
    for (let node in costs) {
        const cost = costs[node];
        if (cost < lowestCost && !processed.includes(node)) {
            lowestCost = cost;
            lowestCostNode = node;
        }
    }
    return lowestCostNode;
}

console.log(shortestPath(graph, 'a', 'g')); // { distance: 5, path: [ 'a', 'c', 'e', 'f', 'g' ] }
